{"version":3,"sources":["store/contacts/types.js","store/contacts/reducer.js","store/reducer.js","store/store.js","store/contacts/selectors.js","store/contacts/actions.js","components/ContactsItem/ContactsItem.js","store/contacts/operations.js","components/ContactsList/ContactsList.js","components/AddContact/AddContact.js","components/UpdateContact/UpdateContact.js","App.js","reportWebVitals.js","index.js"],"names":["SET_CONTACTS","SET_CONTACTS_LOADING","SET_UPDATE_CONTACTS","initialState","isLoading","data","updateData","openModal","contact","reducer","state","action","type","payload","combineReducers","contacts","contactsReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","getContactsSelector","contactsLoadingSelector","getUpdateContactSelector","saveContactsAction","contactsLoadingAction","saveUpdateContactsAction","ContactsItem","item","dispatch","useDispatch","useSelector","firstName","lastName","age","pager","className","style","border","padding","onClick","newContacts","filter","localStorage","setItem","JSON","stringify","deleteContactOperation","ContactsList","contactsLoading","useEffect","parse","getItem","role","contactsList","map","length","colSpan","Table","striped","bordered","hover","AddContact","useState","setFirstName","setLastName","setAge","setPager","Form","Group","Label","Control","value","onChange","e","target","placeholder","Button","variant","values","addContactOperation","UpdateContact","onHide","Modal","show","centered","Header","closeButton","Title","id","Body","Footer","updateContact","updateContactOperation","App","Container","Accordion","Card","Toggle","as","eventKey","Collapse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c635f56.chunk.js","sourcesContent":["export const SET_CONTACTS = 'SET_CONTACTS';\r\nexport const SET_CONTACTS_LOADING = 'SET_CONTACTS_LOADING';\r\nexport const SET_UPDATE_CONTACTS = 'SET_UPDATE_CONTACTS';\r\n","import { SET_CONTACTS, SET_CONTACTS_LOADING, SET_UPDATE_CONTACTS } from './types';\r\n\r\nconst initialState = {\r\n  isLoading: true,\r\n  data: [],\r\n  updateData: { openModal: false, contact: {} },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CONTACTS: {\r\n      return { ...state, data: action.payload };\r\n    }\r\n    case SET_CONTACTS_LOADING: {\r\n      return { ...state, isLoading: action.payload };\r\n    }\r\n    case SET_UPDATE_CONTACTS: {\r\n      return { ...state, updateData: action.payload };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\nimport contactsReducer from './contacts/reducer';\r\n\r\nconst reducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nexport default reducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from './reducer';\r\n\r\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  // initialState\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","export const getContactsSelector = state => state.contacts.data;\r\nexport const contactsLoadingSelector = state => state.contacts.isLoading;\r\nexport const getUpdateContactSelector = state => state.contacts.updateData;\r\n","import { SET_CONTACTS, SET_CONTACTS_LOADING, SET_UPDATE_CONTACTS } from './types';\r\n\r\nexport const saveContactsAction = contacts => ({ type: SET_CONTACTS, payload: contacts });\r\n\r\nexport const contactsLoadingAction = isLoading => ({ type: SET_CONTACTS_LOADING, payload: isLoading });\r\n\r\nexport const saveUpdateContactsAction = updateData => ({ type: SET_UPDATE_CONTACTS, payload: updateData });\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { saveUpdateContactsAction } from '../../store/contacts/actions';\r\nimport { deleteContactOperation } from '../../store/contacts/operations';\r\nimport { getContactsSelector } from '../../store/contacts/selectors';\r\nimport './ContactsItem.css';\r\n\r\nconst ContactsItem = ({ item, contact }) => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContactsSelector);\r\n\r\n  const { firstName, lastName, age, pager } = contact;\r\n  const openUpdateModal = () => {\r\n    dispatch(saveUpdateContactsAction({ openModal: true, contact, item }));\r\n  };\r\n\r\n  const deleteContact = () => {\r\n    dispatch(deleteContactOperation(pager, contacts));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <td>{item + 1}</td>\r\n      <td>{firstName}</td>\r\n      <td>{lastName}</td>\r\n      <td>{age}</td>\r\n      <td>{pager}</td>\r\n      <td className='contact__item-buttons' style={{ border: 'none', padding: '0' }}>\r\n        <button type='button' className='btn btn-primary mr-3' onClick={openUpdateModal}>\r\n          Update\r\n        </button>\r\n        <button type='button' className='btn btn-danger' onClick={deleteContact}>\r\n          &#10006;\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsItem;\r\n","import { contactsLoadingAction, saveContactsAction } from './actions';\r\n\r\nexport const getContactsOperation = () => dispatch => {\r\n  dispatch(contactsLoadingAction(true));\r\n\r\n  const contacts = JSON.parse(localStorage.getItem('contacts'));\r\n  if (contacts) {\r\n    dispatch(saveContactsAction(contacts));\r\n  }\r\n  dispatch(contactsLoadingAction(false));\r\n};\r\n\r\nexport const addContactOperation = (values, contacts) => dispatch => {\r\n  const newContacts = [...contacts, values];\r\n\r\n  dispatch(saveContactsAction(newContacts));\r\n  localStorage.setItem('contacts', JSON.stringify(newContacts));\r\n};\r\n\r\nexport const updateContactOperation = (updateContact, contacts, item) => dispatch => {\r\n  contacts[item] = updateContact;\r\n\r\n  dispatch(saveContactsAction(contacts));\r\n  localStorage.setItem('contacts', JSON.stringify(contacts));\r\n};\r\n\r\nexport const deleteContactOperation = (pager, contacts) => dispatch => {\r\n  const newContacts = contacts.filter(contact => contact.pager !== pager);\r\n\r\n  dispatch(saveContactsAction(newContacts));\r\n  localStorage.setItem('contacts', JSON.stringify(newContacts));\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Table } from 'react-bootstrap';\r\nimport { contactsLoadingSelector, getContactsSelector } from '../../store/contacts/selectors';\r\nimport { getContactsOperation } from '../../store/contacts/operations';\r\nimport ContactsItem from '../ContactsItem/ContactsItem';\r\n\r\nconst ContactsList = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContactsSelector);\r\n  const contactsLoading = useSelector(contactsLoadingSelector);\r\n\r\n  useEffect(() => {\r\n    dispatch(getContactsOperation());\r\n  }, [dispatch]);\r\n\r\n  if (contactsLoading) {\r\n    return (\r\n      <div className='d-flex justify-content-center'>\r\n        <div className='spinner-border' role='status'>\r\n          <span className='sr-only'>Loading...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  let contactsList = contacts.map((contact, item) => {\r\n    return (\r\n      <tr key={contact.pager} className='contact__item'>\r\n        <ContactsItem key={contact.pager} item={item} contact={contact} />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  if (contacts.length === 0) {\r\n    contactsList = (\r\n      <tr className='contact__item'>\r\n        <td colSpan='6'>There are no entries in the contacts</td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>№</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Age</th>\r\n          <th>Pager</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{contactsList}</tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { addContactOperation } from '../../store/contacts/operations';\r\nimport { getContactsSelector } from '../../store/contacts/selectors';\r\n\r\nconst AddContact = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContactsSelector);\r\n\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [age, setAge] = useState(0);\r\n  const [pager, setPager] = useState('');\r\n\r\n  const addContactFunc = () => {\r\n    dispatch(addContactOperation({ firstName, lastName, age, pager }, contacts));\r\n    setFirstName('');\r\n    setLastName('');\r\n    setAge(0);\r\n    setPager('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>First Name</Form.Label>\r\n          <Form.Control\r\n            value={firstName}\r\n            onChange={e => setFirstName(e.target.value)}\r\n            placeholder={'Enter First Name'}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Last Name</Form.Label>\r\n          <Form.Control value={lastName} onChange={e => setLastName(e.target.value)} placeholder={'Enter Last Name'} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Age</Form.Label>\r\n          <Form.Control value={age} onChange={e => setAge(e.target.value)} placeholder={'Enter Age'} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Pager</Form.Label>\r\n          <Form.Control value={pager} onChange={e => setPager(e.target.value)} placeholder={'Enter Pager'} />\r\n        </Form.Group>\r\n      </Form>\r\n\r\n      <Button variant='outline-success' onClick={addContactFunc}>\r\n        Добавить\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddContact;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport { updateContactOperation } from '../../store/contacts/operations';\r\nimport { getContactsSelector, getUpdateContactSelector } from '../../store/contacts/selectors';\r\nimport { saveUpdateContactsAction } from '../../store/contacts/actions';\r\n\r\nconst UpdateContact = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContactsSelector);\r\n  const { openModal, contact, item } = useSelector(getUpdateContactSelector);\r\n\r\n  const [firstName, setFirstName] = useState(contact.firstName);\r\n  const [lastName, setLastName] = useState(contact.lastName);\r\n  const [age, setAge] = useState(contact.age);\r\n  const [pager, setPager] = useState(contact.pager);\r\n\r\n  const onHide = () => {\r\n    dispatch(saveUpdateContactsAction({ openModal: false, contact }));\r\n  };\r\n\r\n  const updateContactFunc = () => {\r\n    dispatch(updateContactOperation({ firstName, lastName, age, pager }, contacts, item));\r\n    onHide();\r\n  };\r\n\r\n  return (\r\n    <Modal show={openModal} onHide={onHide} centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id='contained-modal-title-vcenter'>Update contact</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label>First Name</Form.Label>\r\n            <Form.Control\r\n              value={firstName}\r\n              onChange={e => setFirstName(e.target.value)}\r\n              placeholder={'Enter First Name'}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Last Name</Form.Label>\r\n            <Form.Control\r\n              value={lastName}\r\n              onChange={e => setLastName(e.target.value)}\r\n              placeholder={'Enter Last Name'}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Age</Form.Label>\r\n            <Form.Control value={age} onChange={e => setAge(e.target.value)} placeholder={'Enter Age'} />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Pager</Form.Label>\r\n            <Form.Control value={pager} onChange={e => setPager(e.target.value)} placeholder={'Enter Pager'} />\r\n          </Form.Group>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant='outline-danger' onClick={onHide}>\r\n          Close\r\n        </Button>\r\n        <Button variant='outline-success' onClick={updateContactFunc}>\r\n          Update\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UpdateContact;\r\n","import React from 'react';\nimport { Container, Accordion, Card, Button } from 'react-bootstrap';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport AddContact from './components/AddContact/AddContact';\nimport UpdateContact from './components/UpdateContact/UpdateContact';\nimport { useSelector } from 'react-redux';\nimport { getUpdateContactSelector } from './store/contacts/selectors';\nimport './App.css';\n\nconst App = () => {\n  const { openModal } = useSelector(getUpdateContactSelector);\n\n  return (\n    <div className='App'>\n      <Container>\n        <h2 className='app__title'>This table is a test task from the company «Telecard-Device»</h2>\n        <Accordion>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant='link' eventKey='0'>\n                Add contact\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey='0'>\n              <Card.Body>\n                <AddContact />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n\n        <ContactsList />\n      </Container>\n      {openModal && <UpdateContact />}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}